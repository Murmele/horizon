CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

PROJECT(horizon)

# https://github.com/Makman2/GCR_CMake
list(APPEND CMAKE_MODULE_PATH
	${PROJECT_SOURCE_DIR}/GCR_CMake/macros)
include(GlibCompileResourcesSupport)

SET(CMAKE_CXX_STANDARD 14)

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

INCLUDE_DIRECTORIES(src/lib)
INCLUDE_DIRECTORIES(3rd_party)
INCLUDE_DIRECTORIES(3rd_party/router)
INCLUDE_DIRECTORIES(3rd_party/router/include)

FIND_PACKAGE(Boost)
IF (Boost_FOUND)
	INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
	LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
ENDIF()
FIND_PACKAGE(Threads)
FIND_PACKAGE(PkgConfig  REQUIRED)
IF(UNIX)
	pkg_check_modules(UUID    REQUIRED uuid)
ENDIF(UNIX)
pkg_check_modules(DEPS    REQUIRED sigc++-2.0)
pkg_check_modules(GTKMM   REQUIRED gtkmm-3.0)
pkg_check_modules(GLIBMM  REQUIRED glibmm-2.4)
pkg_check_modules(EPOXY   REQUIRED epoxy)
pkg_check_modules(RSVG    REQUIRED librsvg-2.0)
pkg_check_modules(YAML    REQUIRED yaml-cpp)
pkg_check_modules(ZMQ     REQUIRED libzmq)
pkg_check_modules(SQLITE  REQUIRED sqlite3)
pkg_check_modules(CAIROMM REQUIRED cairomm-pdf-1.0)
pkg_check_modules(GIT     REQUIRED libgit2)
pkg_check_modules(CURL    REQUIRED libcurl)
pkg_check_modules(GLM     REQUIRED glm)
pkg_check_modules(GLIB    REQUIRED glib-2.0)
pkg_check_modules(GLM     REQUIRED glm)

INCLUDE_DIRECTORIES(${UUID_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${DEPS_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${GTKMM_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${GLIBMM_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${EPOXY_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${RSVG_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${YAML_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${ZMQ_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${SQLITE_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${CAIROMM_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${GIT_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${GLM_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${GLIB_INCLUDE_DIRS})

IF(UNIX)
	INCLUDE_DIRECTORIES(/opt/opencascade/inc/)
	INCLUDE_DIRECTORIES(/usr/include/oce)
	LINK_DIRECTORIES(/opt/opencascade/lib/)
	INCLUDE_DIRECTORIES(/app/include/oce)
ENDIF(UNIX)
IF(WIN32)
	INCLUDE_DIRECTORIES(C:/msys64/mingw64/include/oce/)
	INCLUDE_DIRECTORIES(/mingw64/include/oce/)
ENDIF(WIN32)

#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wshadow")
SET(CMAKE_CXX_FLAGS "-g3 -o3")
IF(WIN32)
	ADD_DEFINITIONS(-DWIN32_UUID)
	SET(WIN_LIBS rpcrt4)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,-subsystem,windows")
ENDIF(WIN32)

ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(3rd_party)
